{% import (
	"strings"
	"fmt"
) %}

{% func RocketGen(shouldBeThreadSafe bool, genericParamCount int) %}
package rocket

{%- if shouldBeThreadSafe -%}
import "sync"
{%- endif -%}

type ReactiveSystem struct {
	{%- if shouldBeThreadSafe -%}
	mu sync.RWMutex
	{%- endif -%}
}

func NewReactiveSystem() *ReactiveSystem {
	return &ReactiveSystem{
		{%- if shouldBeThreadSafe -%}
		mu: sync.RWMutex{},
		{%- endif -%}
	}
}

type Subscriber interface {
	markDirty()
}

type Dependency interface {
	value() any
	version() uint32
	addSubs(...Subscriber)
	removeSub(Subscriber)
}

type WriteableSignal[T comparable] struct {
	rs  *ReactiveSystem
	val T
	subs []Subscriber
	ver uint32
}


func (s *WriteableSignal[T]) Value() T {
	{%- if shouldBeThreadSafe -%}
	s.rs.mu.RLock()
	defer s.rs.mu.RUnlock()
	{%- endif -%}
	return s.val
}

func (s *WriteableSignal[T]) value() any {
	return s.val
}

func (s *WriteableSignal[T]) version() uint32 {
	return s.ver
}

func (s *WriteableSignal[T]) SetValue(value T) {
	{%- if shouldBeThreadSafe -%}
	s.rs.mu.Lock()
	defer s.rs.mu.Unlock()
	{%- endif -%}

	if s.val == value {
		return
	}
	s.val = value

	if len(s.subs) == 0 {
		return
	}
	s.ver++
	s.markDirty()
}

func Signal[T comparable](rs *ReactiveSystem, value T) *WriteableSignal[T] {
	s := &WriteableSignal[T]{rs:rs,val: value, ver: 1}
	return s
}


func (s *WriteableSignal[T]) markDirty() {
	for _, sub := range s.subs {
		sub.markDirty()
	}
}

func (s *WriteableSignal[T]) addSubs(sub ...Subscriber) {
	s.subs = append(s.subs, sub...)
}

func (s *WriteableSignal[T]) removeSub(toRemove Subscriber) {
	for i, sub := range s.subs {
		if sub == toRemove {
			s.subs = append(s.subs[:i], s.subs[i+1:]...)
			return
		}
	}
}

{%- for i := 0; i < genericParamCount; i++ -%}
{%- code
genericCount := i+1
readonlyPrefix := fmt.Sprintf("ReadonlySignal%d", genericCount)
effectPrefix := fmt.Sprintf("SideEffect%d", genericCount)
genericParamsParts := make([]string,0, genericCount+1)
for j := 0; j < genericCount; j++ {
	t := fmt.Sprintf("T%d", j)
	genericParamsParts = append(genericParamsParts, t)
}
genericParams := strings.Join(genericParamsParts, ", ")
genericParamsComparable := genericParams + " comparable"
genericParamsWithOutput := genericParams + ", O"
genericParamsWithOutputComparable := genericParamsWithOutput + " comparable"
-%}
type {%s readonlyPrefix %}Func[{%s genericParamsWithOutputComparable %}] func({%s genericParams %}) O

type {%s readonlyPrefix %}Args[{%s genericParamsComparable %} ] struct {
	{%- for i := 0; i < genericCount; i++ -%}
	Arg{%d i %} T{%d i %}
	{%- endfor -%}
}

type {%s readonlyPrefix %}[{%s genericParamsWithOutputComparable %}] struct {
	rs *ReactiveSystem
	subs []Subscriber
	isDirty bool
	ver uint32 // value of readoly signals changes atomic increment
	versionSum uint32 // value of dependencies changes
	get func({%s genericParams %}) O
	{%- for i := 0; i < genericCount; i++ -%}
	dep{%d i %} Dependency
	{%- endfor -%}
	val            O
}

func Computed{%d i+1 %}[{%s genericParamsWithOutputComparable %}](
	rs *ReactiveSystem,
	{%- for i := 0; i < genericCount; i++ -%}
	dep{%d i %} Dependency,
	{%- endfor -%}
	get {%s readonlyPrefix %}Func[{%s genericParamsWithOutput %}],
) *{%s readonlyPrefix %}[{%s genericParamsWithOutput %}] {
	{%- if shouldBeThreadSafe -%}
	rs.mu.Lock()
	defer rs.mu.Unlock()
	{%- endif -%}

	s := &{%s readonlyPrefix %}[{%s genericParamsWithOutput %}]{
		isDirty: true,
		get:   get,
		ver: 1,
		versionSum: 0,
		{% for i := 0; i < genericCount; i++ -%}
		dep{%d i %}: dep{%d i %},
		{%- endfor %}
	}
	{%- for i := 0; i < genericCount; i++ -%}
	dep{%d i %}.addSubs(s)
	{%- endfor -%}
	{% comment %} s.val = s.get(
		{%- for i := 0; i < genericCount; i++ -%}
		arg{%d i %}.value().(T{%d i %}),
		{%- endfor -%}
	) {% endcomment %}
	return s
}

func (s *{%s readonlyPrefix %}[{%s genericParamsWithOutput %}]) Value() O {
	{%- if shouldBeThreadSafe -%}
	s.rs.mu.Lock()
	defer s.rs.mu.Unlock()
	{%- endif -%}

	return s.value().(O)
}

func (s *{%s readonlyPrefix %}[{%s genericParamsWithOutput %}]) value() any {
	if !s.isDirty {
		return s.val
	}
	s.isDirty = false

	var allArgsSum uint32
	{%- for i := 0; i < genericCount; i++ -%}
	depValue{%d i %}, ok{%d i %} := s.dep{%d i %}.value().(T{%d i %})
	if !ok{%d i %} {
		var zeroT{%d i %} T{%d i %}
		depValue{%d i %} = zeroT{%d i %}
	}
	depVersion{%d i %} := s.dep{%d i %}.version()
	allArgsSum += depVersion{%d i %}
	{%- endfor -%}
	if allArgsSum == s.versionSum {
		return s.val
	}

	s.versionSum = allArgsSum
	currentValue := s.get(
		{%- for i := 0; i < genericCount; i++ -%}
		depValue{%d i %},
		{%- endfor -%}
	)
	if s.val == currentValue {
		return s.val
	}
	s.val = currentValue
	s.ver++
	return s.val
}

func (s *{%s readonlyPrefix %}[{%s genericParamsWithOutput %}]) version() uint32 {
	return s.ver
}

func (s *{%s readonlyPrefix %}[{%s genericParamsWithOutput %}]) markDirty() {
	s.isDirty = true
	for _, sub := range s.subs {
		sub.markDirty()
	}
}

func (s *{%s readonlyPrefix %}[{%s genericParamsWithOutput %}]) addSubs(subs ...Subscriber) {
	s.subs = append(s.subs, subs...)
}

func (s *{%s readonlyPrefix %}[{%s genericParamsWithOutput %}]) removeSub(toRemove Subscriber) {
	for i, sub := range s.subs {
		if sub == toRemove {
			s.subs = append(s.subs[:i], s.subs[i+1:]...)
			return
		}
	}
}

type {%s effectPrefix %}[{%s genericParamsComparable %}] struct {
	rs *ReactiveSystem
	versionSum uint32
	fn         func({%s genericParams %}) error
	{%- for i := 0; i < genericCount; i++ -%}
	dep{%d i %} Dependency
	{%- endfor -%}
}

func Effect{%d i+1%}[{%s genericParamsComparable %}](
	rs *ReactiveSystem,
	{%- for i := 0; i < genericCount; i++ -%}
	dep{%d i %} Dependency,
	{%- endfor -%}
	fn func({%s genericParams %}) error,
)  (stop func()) {
	{%- if shouldBeThreadSafe -%}
	rs.mu.Lock()
	defer rs.mu.Unlock()
	{%- endif -%}

	s := &{%s effectPrefix %}[{%s genericParams %}]{
		rs:     rs,
		fn:     fn,
		versionSum: 0,
		{%- for i := 0; i < genericCount; i++ -%}
		dep{%d i %}: dep{%d i %},
		{%- endfor -%}
	}
	{%- for i := 0; i < genericCount; i++ -%}
	dep{%d i %}.addSubs(s)
	{%- endfor -%}

	s.fn(
		{%- for i := 0; i < genericCount; i++ -%}
		dep{%d i %}.value().(T{%d i %}),
		{%- endfor -%}
	)

	return func(){
		{%- for i := 0; i < genericCount; i++ -%}
		dep{%d i %}.removeSub(s)
		{%- endfor -%}
	}
}

func (s *{%s effectPrefix %}[{%s genericParams %}]) value() any {
	var allArgsSum uint32

	{%- for i := 0; i < genericCount; i++ -%}
	current{%d i %},ok{%d i %} := s.dep{%d i %}.value().(T{%d i %})
	if !ok{%d i %} {
		var zeroT{%d i %} T{%d i %}
		current{%d i %} = zeroT{%d i %}
	}
	currentVersion{%d i %} := s.dep{%d i %}.version()
	allArgsSum += currentVersion{%d i %}

	{%- endfor -%}

	if allArgsSum == s.versionSum {
		return nil
	}
	s.versionSum = allArgsSum

	s.fn(
		{%- for i := 0; i < genericCount; i++ -%}
		current{%d i %},
		{%- endfor -%}
	)
	return nil
}

func (s *{%s effectPrefix %}[{%s genericParams %}]) markDirty() {
	s.value()
}


{%- endfor -%}
{% endfunc %}